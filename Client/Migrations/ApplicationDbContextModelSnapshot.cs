// <auto-generated />
using System;
using Client.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Client.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Client.Entites.About", b =>
                {
                    b.Property<int>("about_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("about_id"), 1L, 1);

                    b.Property<string>("about_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("about_Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("about_Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("about_id");

                    b.ToTable("About", (string)null);

                    b.HasData(
                        new
                        {
                            about_id = 1,
                            about_Description = "The Big Oxmox advised her not to do so, because there were thousands of bad Commas, wild Question Marks and devious Semikoli, but the Little Blind Text didn’t listen. She packed her seven versalia, put her initial into the belt and made herself on the way. \n \n When she reached the first hills of the Italic Mountains, she had a last view back on the skyline of her hometown Bookmarksgrove,the headline of Alphabet Village and the subline of her own road,the Line Lane.Pityful a rethoric question ran over her cheek,then she continued her way.",
                            about_Title = "Footwear the leading eCommerce Store around the Globe",
                            about_Url = "https://www.youtube.com/watch?v=F1vcruph8JA"
                        });
                });

            modelBuilder.Entity("Client.Entites.Bills", b =>
                {
                    b.Property<string>("bill_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("bill_Cancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("bill_Confirmation")
                        .HasColumnType("bit");

                    b.Property<DateTime>("bill_DatetimeOrder")
                        .HasColumnType("datetime2");

                    b.Property<bool>("bill_Delivered")
                        .HasColumnType("bit");

                    b.Property<bool>("bill_Delivering")
                        .HasColumnType("bit");

                    b.Property<int>("bill_Discount")
                        .HasColumnType("int");

                    b.Property<bool>("bill_HideStatus")
                        .HasColumnType("bit");

                    b.Property<string>("bill_Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("bill_PaidTotal")
                        .HasColumnType("int");

                    b.Property<string>("bill_PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_ProductColorlist")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_ProductIdlist")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_ProductNamelist")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_ProductPricelist")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_ProductSizelist")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_Quantity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("bill_Shipping")
                        .HasColumnType("int");

                    b.Property<string>("bill_UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("bill_WaitForConfirmation")
                        .HasColumnType("bit");

                    b.Property<bool>("bill_WaitPickup")
                        .HasColumnType("bit");

                    b.HasKey("bill_Id");

                    b.HasIndex("bill_UserId");

                    b.ToTable("Bills", (string)null);
                });

            modelBuilder.Entity("Client.Entites.Cart", b =>
                {
                    b.Property<string>("cart_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("cart_UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("cart_Id");

                    b.HasIndex("cart_UserID");

                    b.ToTable("Carts", (string)null);
                });

            modelBuilder.Entity("Client.Entites.CartsDevice", b =>
                {
                    b.Property<string>("cartd_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("cartd_DeviceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("cartd_Id");

                    b.HasIndex("cartd_DeviceId");

                    b.ToTable("CartsDevice", (string)null);
                });

            modelBuilder.Entity("Client.Entites.Categories", b =>
                {
                    b.Property<string>("cg_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("cg_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cg_Sale")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cg_Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cg_Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("cg_Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            cg_Id = "7f52fcbe-c7cd-412f-9fff-917c7996f875",
                            cg_Name = "Clothes",
                            cg_Sale = "",
                            cg_Sex = "Women",
                            cg_Type = "Hot Trend"
                        },
                        new
                        {
                            cg_Id = "d3682bfe-dc67-4187-b5e6-f2e25634847e",
                            cg_Name = "Clothes",
                            cg_Sale = "",
                            cg_Sex = "Women",
                            cg_Type = "Best saler"
                        },
                        new
                        {
                            cg_Id = "871b0d9f-9379-44ac-902a-5c21d59a6162",
                            cg_Name = "Clothes",
                            cg_Sale = "",
                            cg_Sex = "Men",
                            cg_Type = "Feature"
                        });
                });

            modelBuilder.Entity("Client.Entites.ContactSystem", b =>
                {
                    b.Property<string>("Contact_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Contact_Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact_Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact_Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.HasKey("Contact_Id");

                    b.ToTable("ContactSystems", (string)null);

                    b.HasData(
                        new
                        {
                            Contact_Id = "fbf2252a-1a4f-439c-8c48-e9822919ec01",
                            Contact_Address = "Address",
                            Contact_Description = "Description",
                            Contact_Email = "Email",
                            Contact_Phone = "Phone",
                            isDelete = false
                        });
                });

            modelBuilder.Entity("Client.Entites.ContactUsers", b =>
                {
                    b.Property<string>("cu_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("cu_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cu_Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cu_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cu_Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("cu_Id");

                    b.ToTable("ContactUsers", (string)null);

                    b.HasData(
                        new
                        {
                            cu_Id = "a91b1d5d-8e04-444e-9dda-2a1e4479dfa3",
                            cu_Description = "Description",
                            cu_Email = "Email",
                            cu_Name = "FirstName",
                            cu_Phone = "Phone"
                        });
                });

            modelBuilder.Entity("Client.Entites.Coupons", b =>
                {
                    b.Property<string>("couponId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("couponCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("couponPrice")
                        .HasColumnType("int");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.HasKey("couponId");

                    b.ToTable("Coupons", (string)null);

                    b.HasData(
                        new
                        {
                            couponId = "72d49f3d-7d6a-4ec4-a95b-5aa72d447f64",
                            couponCode = "code10",
                            couponPrice = 10,
                            isDelete = false
                        },
                        new
                        {
                            couponId = "67ad47f3-e4a6-4c2f-aff5-aa81ed0011dd",
                            couponCode = "code50",
                            couponPrice = 50,
                            isDelete = false
                        });
                });

            modelBuilder.Entity("Client.Entites.Device", b =>
                {
                    b.Property<string>("deviceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("deviceAddress1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deviceAddress2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deviceCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deviceCompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deviceCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deviceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("devicePhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("devicePostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deviceState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("deviceId");

                    b.ToTable("Device", (string)null);
                });

            modelBuilder.Entity("Client.Entites.ProductInCart", b =>
                {
                    b.Property<string>("pic_CartId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("pic_ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("pic_amount")
                        .HasColumnType("int");

                    b.Property<string>("pic_color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pic_size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("pic_CartId", "pic_ProductId");

                    b.HasIndex("pic_ProductId");

                    b.ToTable("ProductInCart", (string)null);
                });

            modelBuilder.Entity("Client.Entites.ProductInCartDevices", b =>
                {
                    b.Property<string>("picd_CartId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("picd_ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("picd_amount")
                        .HasColumnType("int");

                    b.Property<string>("picd_color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("picd_size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("picd_CartId", "picd_ProductId");

                    b.HasIndex("picd_ProductId");

                    b.ToTable("ProductInCartDevices", (string)null);
                });

            modelBuilder.Entity("Client.Entites.Products", b =>
                {
                    b.Property<string>("pd_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.Property<string>("pd_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_Img1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_Img2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_Img3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_Img4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_NameImg1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_NameImg2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_NameImg3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_NameImg4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("pd_Price")
                        .HasColumnType("int");

                    b.Property<int>("pd_Rate")
                        .HasColumnType("int");

                    b.Property<int>("pd_ReducePrice")
                        .HasColumnType("int");

                    b.Property<string>("pd_ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("pd_WaitForConfirmation")
                        .HasColumnType("bit");

                    b.HasKey("pd_Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            pd_Id = "e6bc4c70-3666-47ac-b02a-acf2b7f8c0b4",
                            CategoryId = "871b0d9f-9379-44ac-902a-5c21d59a6162",
                            isDelete = false,
                            pd_Description = "Buttons tweed blazer",
                            pd_Img1 = "/Client/img/product/product-1.jpg",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "Buttons tweed blazer",
                            pd_NameImg1 = "Buttons tweed blazer",
                            pd_NameImg2 = "name img 2",
                            pd_NameImg3 = "name img 3",
                            pd_NameImg4 = "name img 4",
                            pd_Price = 59,
                            pd_Rate = 5,
                            pd_ReducePrice = 50000,
                            pd_ShortDescription = "Buttons tweed blazer",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "19421d95-2ce9-48b3-be30-57a7e6ff913e",
                            CategoryId = "871b0d9f-9379-44ac-902a-5c21d59a6162",
                            isDelete = false,
                            pd_Description = "Flowy striped skirt",
                            pd_Img1 = "/Client/img/product/product-2.jpg",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "Flowy striped skirt",
                            pd_NameImg1 = "Flowy striped skirt",
                            pd_NameImg2 = "name img 2",
                            pd_NameImg3 = "name img 3",
                            pd_NameImg4 = "name img 4",
                            pd_Price = 59,
                            pd_Rate = 5,
                            pd_ReducePrice = 50000,
                            pd_ShortDescription = "Flowy striped skirt",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "004ed78e-43cd-4e37-ac3c-6bb0df6dfb49",
                            CategoryId = "871b0d9f-9379-44ac-902a-5c21d59a6162",
                            isDelete = false,
                            pd_Description = "Cotton T-Shirt",
                            pd_Img1 = "/Client/img/product/product-3.jpg",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "Cotton T-Shirt",
                            pd_NameImg1 = "Cotton T-Shirt",
                            pd_NameImg2 = "name img 2",
                            pd_NameImg3 = "name img 3",
                            pd_NameImg4 = "name img 4",
                            pd_Price = 59,
                            pd_Rate = 5,
                            pd_ReducePrice = 50000,
                            pd_ShortDescription = "Cotton T-Shirt",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "f07cd142-dd13-4eee-bc58-c8fa06fcd865",
                            CategoryId = "871b0d9f-9379-44ac-902a-5c21d59a6162",
                            isDelete = false,
                            pd_Description = "Slim striped pocket shirt",
                            pd_Img1 = "/Client/img/product/product-4.jpg",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "Slim striped pocket shirt",
                            pd_NameImg1 = "Slim striped pocket shirt",
                            pd_NameImg2 = "name img 2",
                            pd_NameImg3 = "name img 3",
                            pd_NameImg4 = "name img 4",
                            pd_Price = 59,
                            pd_Rate = 5,
                            pd_ReducePrice = 50000,
                            pd_ShortDescription = "Slim striped pocket shirt",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "a3a9a70a-8af4-4a58-b649-c176669a52c7",
                            CategoryId = "7f52fcbe-c7cd-412f-9fff-917c7996f875",
                            isDelete = false,
                            pd_Description = "Fit micro corduroy shirt",
                            pd_Img1 = "/Client/img/product/product-5.jpg",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "Fit micro corduroy shirt",
                            pd_NameImg1 = "Fit micro corduroy shirt",
                            pd_NameImg2 = "name img 2",
                            pd_NameImg3 = "name img 3",
                            pd_NameImg4 = "name img 4",
                            pd_Price = 59,
                            pd_Rate = 5,
                            pd_ReducePrice = 50000,
                            pd_ShortDescription = "Fit micro corduroy shirt",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "6ddcc5c0-c0a8-446f-a29f-5965f688b45f",
                            CategoryId = "7f52fcbe-c7cd-412f-9fff-917c7996f875",
                            isDelete = false,
                            pd_Description = "Tropical Kimono",
                            pd_Img1 = "/Client/img/product/product-6.jpg",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "Tropical Kimono",
                            pd_NameImg1 = "Tropical Kimono",
                            pd_NameImg2 = "name img 2",
                            pd_NameImg3 = "name img 3",
                            pd_NameImg4 = "name img 4",
                            pd_Price = 59,
                            pd_Rate = 5,
                            pd_ReducePrice = 50000,
                            pd_ShortDescription = "Tropical Kimono",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "e3cdb75d-b9c2-4ea8-be6e-75c793cf5ec2",
                            CategoryId = "d3682bfe-dc67-4187-b5e6-f2e25634847e",
                            isDelete = false,
                            pd_Description = "Contrasting sunglasses",
                            pd_Img1 = "/Client/img/product/product-7.jpg",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "Contrasting sunglasses",
                            pd_NameImg1 = "Contrasting sunglasses",
                            pd_NameImg2 = "name img 2",
                            pd_NameImg3 = "name img 3",
                            pd_NameImg4 = "name img 4",
                            pd_Price = 59,
                            pd_Rate = 5,
                            pd_ReducePrice = 50000,
                            pd_ShortDescription = "Contrasting sunglasses",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "29aee6a1-1168-423d-81a5-0aa141a97525",
                            CategoryId = "d3682bfe-dc67-4187-b5e6-f2e25634847e",
                            isDelete = false,
                            pd_Description = "Water resistant backpack",
                            pd_Img1 = "/Client/img/product/product-8.jpg",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "Water resistant backpack",
                            pd_NameImg1 = "Water resistant backpack",
                            pd_NameImg2 = "name img 2",
                            pd_NameImg3 = "name img 3",
                            pd_NameImg4 = "name img 4",
                            pd_Price = 59,
                            pd_Rate = 5,
                            pd_ReducePrice = 50000,
                            pd_ShortDescription = "Water resistant backpack",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "de532dcc-1439-4fb8-9989-04767b728882",
                            CategoryId = "7f52fcbe-c7cd-412f-9fff-917c7996f875",
                            isDelete = false,
                            pd_Description = "Chain bucket bag",
                            pd_Img1 = "/Client/img/trend/ht-1.jpg",
                            pd_Img2 = "/Client/img/trend/ht-1.jpg",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "Chain bucket bag",
                            pd_NameImg1 = "Chain bucket bag",
                            pd_NameImg2 = "Chain bucket bag",
                            pd_NameImg3 = "name img 3",
                            pd_NameImg4 = "name img 4",
                            pd_Price = 59,
                            pd_Rate = 5,
                            pd_ReducePrice = 50000,
                            pd_ShortDescription = "Chain bucket bag",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "2c49a3c4-c42b-4ea6-958f-96a84e745d2a",
                            CategoryId = "7f52fcbe-c7cd-412f-9fff-917c7996f875",
                            isDelete = false,
                            pd_Description = "Pendant earrings",
                            pd_Img1 = "/Client/img/trend/ht-2.jpg",
                            pd_Img2 = "/Client/img/trend/ht-2.jpg",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "Pendant earrings",
                            pd_NameImg1 = "Pendant earrings",
                            pd_NameImg2 = "Pendant earrings",
                            pd_NameImg3 = "name img 3",
                            pd_NameImg4 = "name img 4",
                            pd_Price = 59,
                            pd_Rate = 5,
                            pd_ReducePrice = 50000,
                            pd_ShortDescription = "Pendant earrings",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "d5f569c6-b12a-4dc2-b20e-bdb7ec8fb8ff",
                            CategoryId = "7f52fcbe-c7cd-412f-9fff-917c7996f875",
                            isDelete = false,
                            pd_Description = "Cotton T-Shirt",
                            pd_Img1 = "/Client/img/trend/ht-3.jpg",
                            pd_Img2 = "/Client/img/trend/ht-3.jpg",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "Cotton T-Shirt",
                            pd_NameImg1 = "Cotton T-Shirt",
                            pd_NameImg2 = "Cotton T-Shirt",
                            pd_NameImg3 = "name img 3",
                            pd_NameImg4 = "name img 4",
                            pd_Price = 59,
                            pd_Rate = 5,
                            pd_ReducePrice = 50000,
                            pd_ShortDescription = "Cotton T-Shirt",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "4fc9b520-fd70-4ce3-9e4d-cb5ed162f62e",
                            CategoryId = "d3682bfe-dc67-4187-b5e6-f2e25634847e",
                            isDelete = false,
                            pd_Description = "Cotton T-Shirt",
                            pd_Img1 = "/Client/img/trend/bs-1.jpg",
                            pd_Img2 = "/Client/img/trend/bs-1.jpg",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "Cotton T-Shirt",
                            pd_NameImg1 = "Cotton T-Shirt",
                            pd_NameImg2 = "Cotton T-Shirt",
                            pd_NameImg3 = "name img 3",
                            pd_NameImg4 = "name img 4",
                            pd_Price = 59,
                            pd_Rate = 5,
                            pd_ReducePrice = 50000,
                            pd_ShortDescription = "Cotton T-Shirt",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "2f6c1518-bbe0-4b4d-87fa-77007098bd82",
                            CategoryId = "d3682bfe-dc67-4187-b5e6-f2e25634847e",
                            isDelete = false,
                            pd_Description = "Zip-pockets pebbled tote",
                            pd_Img1 = "/Client/img/trend/bs-2.jpg",
                            pd_Img2 = "/Client/img/trend/bs-2.jpg",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "Zip-pockets pebbled tote",
                            pd_NameImg1 = "Zip-pockets pebbled tote",
                            pd_NameImg2 = "Zip-pockets pebbled tote",
                            pd_NameImg3 = "name img 3",
                            pd_NameImg4 = "name img 4",
                            pd_Price = 59,
                            pd_Rate = 5,
                            pd_ReducePrice = 50000,
                            pd_ShortDescription = "Zip-pockets pebbled tote",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "69cf899e-e833-45ab-90a4-bfb7e2c654b1",
                            CategoryId = "d3682bfe-dc67-4187-b5e6-f2e25634847e",
                            isDelete = false,
                            pd_Description = "Round leather bag",
                            pd_Img1 = "/Client/img/trend/bs-3.jpg",
                            pd_Img2 = "/Client/img/trend/bs-3.jpg",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "Round leather bag",
                            pd_NameImg1 = "Round leather bag",
                            pd_NameImg2 = "Round leather bag",
                            pd_NameImg3 = "name img 3",
                            pd_NameImg4 = "name img 4",
                            pd_Price = 59,
                            pd_Rate = 5,
                            pd_ReducePrice = 50000,
                            pd_ShortDescription = "Round leather bag",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "c997c98f-0eb1-425e-b922-b9b904f19c1a",
                            CategoryId = "871b0d9f-9379-44ac-902a-5c21d59a6162",
                            isDelete = false,
                            pd_Description = "Bow wrap skirt",
                            pd_Img1 = "/Client/img/trend/f-1.jpg",
                            pd_Img2 = "/Client/img/trend/f-1.jpg",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "Bow wrap skirt",
                            pd_NameImg1 = "Bow wrap skirt",
                            pd_NameImg2 = "Bow wrap skirt",
                            pd_NameImg3 = "name img 3",
                            pd_NameImg4 = "name img 4",
                            pd_Price = 59,
                            pd_Rate = 5,
                            pd_ReducePrice = 50000,
                            pd_ShortDescription = "Bow wrap skirt",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "05424b82-3ea5-4848-9b57-030dce7c9c2e",
                            CategoryId = "871b0d9f-9379-44ac-902a-5c21d59a6162",
                            isDelete = false,
                            pd_Description = "Metallic earrings",
                            pd_Img1 = "/Client/img/trend/f-2.jpg",
                            pd_Img2 = "/Client/img/trend/f-2.jpg",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "Metallic earrings",
                            pd_NameImg1 = "Metallic earrings",
                            pd_NameImg2 = "Metallic earrings",
                            pd_NameImg3 = "name img 3",
                            pd_NameImg4 = "name img 4",
                            pd_Price = 59,
                            pd_Rate = 5,
                            pd_ReducePrice = 50000,
                            pd_ShortDescription = "Metallic earrings",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "c4d12225-b011-403a-af3d-5605a4fe881d",
                            CategoryId = "871b0d9f-9379-44ac-902a-5c21d59a6162",
                            isDelete = false,
                            pd_Description = "Flap cross-body bag",
                            pd_Img1 = "/Client/img/trend/f-3.jpg",
                            pd_Img2 = "/Client/img/trend/f-3.jpg",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "Flap cross-body bag",
                            pd_NameImg1 = "Flap cross-body bag",
                            pd_NameImg2 = "Flap cross-body bag",
                            pd_NameImg3 = "name img 3",
                            pd_NameImg4 = "name img 4",
                            pd_Price = 59,
                            pd_Rate = 5,
                            pd_ReducePrice = 50000,
                            pd_ShortDescription = "Flap cross-body bag",
                            pd_WaitForConfirmation = false
                        });
                });

            modelBuilder.Entity("Client.Entites.Shipping", b =>
                {
                    b.Property<string>("ship_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ship_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ship_Price")
                        .HasColumnType("int");

                    b.HasKey("ship_Id");

                    b.ToTable("Shipping", (string)null);

                    b.HasData(
                        new
                        {
                            ship_Id = "7CF94A7D-9239-446E-A404-086518F84652",
                            isDelete = false,
                            ship_Name = "Ship",
                            ship_Price = 5
                        });
                });

            modelBuilder.Entity("Client.Entites.SubscribeEmail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SubscribeEmail");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "f49e4348-718f-43e3-b1f6-6dc89c5Bb5ff",
                            RoleId = "f49e4348-718f-43e3-b1f6-6dc89c5Bb4fd"
                        },
                        new
                        {
                            UserId = "DE544998-A3CC-4E12-ABB4-0642E57BD222",
                            RoleId = "360E601E-92F2-4F08-832B-604A21293258"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Client.Entites.AppRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.ToTable("Roles");

                    b.HasDiscriminator().HasValue("AppRole");

                    b.HasData(
                        new
                        {
                            Id = "f49e4348-718f-43e3-b1f6-6dc89c5Bb4fd",
                            ConcurrencyStamp = "7d689fff-a681-4f9f-969d-bfeab7ca2dd4",
                            Name = "Staff",
                            NormalizedName = "staff",
                            Description = "Staff",
                            isDelete = false
                        },
                        new
                        {
                            Id = "360E601E-92F2-4F08-832B-604A21293258",
                            ConcurrencyStamp = "8627d8e1-3ee3-47fd-8307-d461d3e8a670",
                            Name = "Admin",
                            NormalizedName = "admin",
                            Description = "Admin",
                            isDelete = false
                        });
                });

            modelBuilder.Entity("Client.Entites.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("DoB")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_Address2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("AppUser");

                    b.HasData(
                        new
                        {
                            Id = "DE544998-A3CC-4E12-ABB4-0642E57BD222",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6969e86c-a5f8-46d5-b4a5-71800abe8c10",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHX036u548laIv7/tm0WOQyNZtM5PVDwdllf02m72M3d6X+4Sw5CDcYCqN/ZG5yeYw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1b2021e7-6af9-47b1-9f77-321ad500703e",
                            TwoFactorEnabled = false,
                            UserName = "Admin",
                            DoB = new DateTime(2020, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "admin",
                            LastName = "admin",
                            bill_Address1 = "",
                            bill_Address2 = "",
                            bill_City = "",
                            bill_CompanyName = "",
                            bill_Country = "",
                            bill_PhoneNumber = "",
                            bill_PostalCode = "",
                            bill_State = "",
                            isDelete = false
                        },
                        new
                        {
                            Id = "f49e4348-718f-43e3-b1f6-6dc89c5Bb5ff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c40563c5-61cc-49c1-a1cb-b7d4bcf8a369",
                            Email = "staff@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STAFF@GMAIL.COM",
                            NormalizedUserName = "STAFF@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEN7RMjyAaYJhOQytRvRJG30ymexz5Aif+kRfl+jWDHxdYd3kkT7nCCeWbyazAmhRKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "14e22cfd-e4bb-4767-89ae-60ec88997b2a",
                            TwoFactorEnabled = false,
                            UserName = "Staff",
                            DoB = new DateTime(2020, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "staff",
                            LastName = "staff",
                            bill_Address1 = "",
                            bill_Address2 = "",
                            bill_City = "",
                            bill_CompanyName = "",
                            bill_Country = "",
                            bill_PhoneNumber = "",
                            bill_PostalCode = "",
                            bill_State = "",
                            isDelete = false
                        });
                });

            modelBuilder.Entity("Client.Entites.Bills", b =>
                {
                    b.HasOne("Client.Entites.AppUser", "AppUserB")
                        .WithMany("BillsAU")
                        .HasForeignKey("bill_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUserB");
                });

            modelBuilder.Entity("Client.Entites.Cart", b =>
                {
                    b.HasOne("Client.Entites.AppUser", "AppUserC")
                        .WithMany("CartU")
                        .HasForeignKey("cart_UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUserC");
                });

            modelBuilder.Entity("Client.Entites.CartsDevice", b =>
                {
                    b.HasOne("Client.Entites.Device", "DeviceCD")
                        .WithMany("CartsDeviceD")
                        .HasForeignKey("cartd_DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceCD");
                });

            modelBuilder.Entity("Client.Entites.ProductInCart", b =>
                {
                    b.HasOne("Client.Entites.Cart", "CartPICart")
                        .WithMany("ProductInCartC")
                        .HasForeignKey("pic_CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Client.Entites.Products", "ProductsPICart")
                        .WithMany("ProductInCartP")
                        .HasForeignKey("pic_ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CartPICart");

                    b.Navigation("ProductsPICart");
                });

            modelBuilder.Entity("Client.Entites.ProductInCartDevices", b =>
                {
                    b.HasOne("Client.Entites.CartsDevice", "CartsDevicePICD")
                        .WithMany("ProductInCartDevicesCD")
                        .HasForeignKey("picd_CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Client.Entites.Products", "ProductsPICD")
                        .WithMany("ProductInCartDevicesP")
                        .HasForeignKey("picd_ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CartsDevicePICD");

                    b.Navigation("ProductsPICD");
                });

            modelBuilder.Entity("Client.Entites.Products", b =>
                {
                    b.HasOne("Client.Entites.Categories", "Categories")
                        .WithMany("products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Client.Entites.Cart", b =>
                {
                    b.Navigation("ProductInCartC");
                });

            modelBuilder.Entity("Client.Entites.CartsDevice", b =>
                {
                    b.Navigation("ProductInCartDevicesCD");
                });

            modelBuilder.Entity("Client.Entites.Categories", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("Client.Entites.Device", b =>
                {
                    b.Navigation("CartsDeviceD");
                });

            modelBuilder.Entity("Client.Entites.Products", b =>
                {
                    b.Navigation("ProductInCartDevicesP");

                    b.Navigation("ProductInCartP");
                });

            modelBuilder.Entity("Client.Entites.AppUser", b =>
                {
                    b.Navigation("BillsAU");

                    b.Navigation("CartU");
                });
#pragma warning restore 612, 618
        }
    }
}
